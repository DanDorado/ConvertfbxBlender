# sudo '../../../mnt/c/Program Files/Blender Foundation/Blender 3.2/blender.exe'  -b -P importscript.py

import bpy
import math
import os
import re


import sys
argv = sys.argv
argv = argv[argv.index("--") + 1:]  # get all args after "--"

print(argv)

# delete starting objects
print("Deleting Starting Objects")
print("")
startingObjects = ["Light", "Camera"]
for obj in startingObjects:
    bpy.data.objects[obj].select_set(True)    
    bpy.context.view_layer.objects.active = bpy.data.objects[obj]

bpy.ops.object.delete()


######## Convert fbx to Obj ##########

if (argv[0] == '1'):
    print("beginning to convert files")
    # assign directory
    directory = '/home/dandorado/blender/fbxfiles'
    
    # iterate over files in
    # that directory
    for filename in os.listdir(directory):
        f = os.path.join(directory, filename)
        # checking if it is a file
        if os.path.isfile(f):
            print("Beginning import of "+f)
            # Import FBX into the scene
            bpy.ops.import_scene.fbx(filepath=f)

        bpy.ops.object.select_all(action='DESELECT')

        # check if actions is empty
        if bpy.data.actions:
            print("Trimming Frames")
            # get all actions
            action_list = [action.frame_range for action in bpy.data.actions]

            # sort, remove doubles and create a set
            keys = (sorted(set([item for sublist in action_list for item in sublist])))

            # print all keyframes
            print (keys)

            # print first and last keyframe
            print ("{} {}".format("first keyframe:", keys[0]))
            print ("{} {}".format("last keyframe:", keys[-1]))

            bpy.data.scenes[0].frame_start = int(keys[0])
            bpy.data.scenes[0].frame_end = int(keys[-1])

        else:
            print ("no actions for frames")





        objects = bpy.context.scene.objects
        print("Now exporting frames as obj")
        for obj in objects:
            bpy.ops.object.select_all(action='DESELECT')
            objectToSelect = obj
            print("Considering "+obj.name)
            objectToSelect.select_set(True) 
            if re.search("Armature", obj.name):
                print(obj.name+" is giong to be used.")
                bpy.context.view_layer.objects.active = obj
                newpath = r'./objFrames/'+obj.name 
                if not os.path.exists(newpath):
                    os.makedirs(newpath)   
                bpy.context.view_layer.objects.active = objectToSelect
                bpy.ops.export_scene.obj(filepath=r"./objFrames/"+obj.name+"/"+obj.name+".obj",use_animation=True)

        print("Deleting all objects in secene")
        objects = bpy.context.scene.objects
        for obj in objects:
            obj.select_set(True)    
            bpy.context.view_layer.objects.active = obj
        bpy.ops.object.delete()


   ######## Convert Obj to STL ##########

if (argv[1] == '1'):
    directory = '/home/dandorado/blender/objFrames'
    for subdir in os.listdir(directory):
        for filename in os.listdir(os.path.join(directory, subdir)):
            if re.search("obj", filename):
                f = os.path.join(directory, subdir, filename)
                # checking if it is a file
                if os.path.isfile(f):
                    print(f)
                    # Import obj into the scene
                    bpy.ops.import_scene.obj(filepath=f)

        newpath = r'/home/dandorado/blender/stlFrames/'+subdir 
        if not os.path.exists(newpath):
            os.makedirs(newpath)

        #deselect all meshes
        bpy.ops.object.select_all(action='DESELECT')

        objects = bpy.context.scene.objects
        for obj in objects:
            print(obj.name)
            obj.select_set(True)
            bpy.ops.export_mesh.stl(filepath = newpath+"/"+obj.name+".stl",ascii=True,use_selection=True)
            bpy.ops.object.delete()


######## Convert STL to 4STL ##########